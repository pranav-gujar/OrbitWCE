import React, { useContext, useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import AuthContext from '../../AuthContext/AuthContext';
import { FaUser, FaCalendarAlt, FaRegCalendarCheck, FaSignOutAlt, FaHeart, FaEdit } from 'react-icons/fa';

const Dashboard = () => {
  const { user, handleSubmit, setUser } = useContext(AuthContext);
  const navigate = useNavigate();
  const [events, setEvents] = useState([]);
  const [registeredEvents, setRegisteredEvents] = useState([]);
  const [likedEvents, setLikedEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [profileData, setProfileData] = useState({
    name: '',
    bio: '',
    photo: '',
    phone: '',
    socialLinks: {
      linkedin: '',
      portfolio: ''
    }
  });

  useEffect(() => {
    if (user) {
      setProfileData({
        name: user.name || '',
        bio: user.bio || '',
        photo: user.photo || '',
        phone: user.phone || '',
        socialLinks: {
          linkedin: user.socialLinks?.linkedin || '',
          portfolio: user.socialLinks?.portfolio || ''
        }
      });
      fetchData();
    }
  }, [user]);

  const fetchData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // Get token from localStorage
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('Authentication token not found');
      }
      
      const headers = { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}` 
      };
      
      // Fetch upcoming events
      const eventsResponse = await fetch('http://localhost:3000/api/events', {
        method: 'GET',
        headers
      });
      
      if (!eventsResponse.ok) {
        throw new Error('Failed to fetch events');
      }
      
      const eventsData = await eventsResponse.json();
      setEvents(eventsData.data || []);
      
      // Fetch registered events - improved implementation
      const registeredEvts = [];
      
      // Filter events with registrations that match the user's email
      if (eventsData.data && eventsData.data.length > 0) {
        eventsData.data.forEach(event => {
          if (event.registrations && Array.isArray(event.registrations) && 
              event.registrations.some(reg => reg.email === user.email)) {
            registeredEvts.push({
              id: event._id,
              title: event.title,
              date: new Date(event.date).toLocaleDateString(),
              status: 'Registered'
            });
          }
        });
      }
      
      setRegisteredEvents(registeredEvts);
      
      // Fetch liked events from the API
      try {
        const likedEventsResponse = await fetch('http://localhost:3000/api/events/user/liked', {
          method: 'GET',
          headers
        });
        
        if (likedEventsResponse.ok) {
          const likedEventsData = await likedEventsResponse.json();
          
          if (likedEventsData.data && Array.isArray(likedEventsData.data)) {
            const formattedLikedEvents = likedEventsData.data.map(event => ({
              id: event._id,
              title: event.title,
              date: new Date(event.date).toLocaleDateString(),
              location: event.location || 'Not specified'
            }));
            setLikedEvents(formattedLikedEvents);
          } else {
            console.warn('Liked events data is not in expected format:', likedEventsData);
            setLikedEvents([]);
          }
        } else {
          console.error('Failed to fetch liked events');
          setLikedEvents([]);
        }
      } catch (error) {
        console.error('Error fetching liked events:', error);
        setLikedEvents([]);
      }
      
    } catch (error) {
      console.error('Error fetching data:', error);
      setError('Failed to load dashboard data. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = async (e) => {
    e.preventDefault();
    try {
      localStorage.removeItem('token');
      setUser(null);
      navigate('/login');
    } catch (error) {
      console.error('Logout failed:', error);
    }
  };
  
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    
    if (name.includes('.')) {
      // Handle nested objects like socialLinks.linkedin
      const [parent, child] = name.split('.');
      setProfileData(prev => ({
        ...prev,
        [parent]: {
          ...prev[parent],
          [child]: value
        }
      }));
    } else {
      setProfileData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };
  
  const handleProfileSubmit = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('http://localhost:3000/api/users/profile/user', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(profileData)
      });
      
      const data = await response.json();
      
      if (response.ok) {
        // Update user in context
        setUser(prev => ({
          ...prev,
          ...data.data
        }));
        
        // Update localStorage
        const storedUser = JSON.parse(localStorage.getItem('user'));
        localStorage.setItem('user', JSON.stringify({
          ...storedUser,
          ...data.data
        }));
        
        setIsEditing(false);
        alert('Profile updated successfully!');
      } else {
        alert(`Error: ${data.message || 'Failed to update profile'}`);
      }
    } catch (error) {
      console.error('Error updating profile:', error);
      alert('An error occurred while updating your profile');
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 py-8 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-xl overflow-hidden sm:rounded-xl border border-gray-700 p-6">
            <div className="text-red-300 text-center">
              <p>{error}</p>
              <button 
                onClick={fetchData}
                className="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                Try Again
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <div className="bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-xl overflow-hidden sm:rounded-xl border border-gray-700">
          <div className="px-4 py-5 sm:px-6 border-b border-gray-700">
            <div className="flex justify-between items-center">
              <h3 className="text-lg leading-6 font-medium text-white">
                <FaUser className="inline mr-2 text-blue-400" />
                User Profile
              </h3>
              <div className="flex space-x-2">
                <button
                  type="button"
                  onClick={() => setIsEditing(!isEditing)}
                  className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  {isEditing ? 'Cancel' : 'Edit Profile'}
                </button>
                <button
                  type="button"
                  onClick={handleLogout}
                  className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                >
                  <FaSignOutAlt className="mr-2" />
                  Logout
                </button>
              </div>
            </div>
          </div>
          
          <div className="px-4 py-5 sm:p-6">
            {isEditing ? (
              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Edit form fields */}
              </form>
            ) : (
              <div className="flex flex-col md:flex-row">
                {user?.photo ? (
                  <div className="mb-4 md:mb-0 md:mr-6">
                    <img 
                      src={user.photo} 
                      alt={user.name}
                      className="w-32 h-32 rounded-full object-cover border-2 border-blue-500 shadow-md"
                    />
                      </div>
                    ) : (
                      <div className="mb-4 md:mb-0 md:mr-6">
                        <div className="w-32 h-32 rounded-full bg-gray-600 flex items-center justify-center border-2 border-blue-500 shadow-md">
                          <FaUser className="text-gray-400 text-4xl" />
                        </div>
                      </div>
                    )}
                    <div className="space-y-3 flex-1">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div className="bg-gray-800 bg-opacity-30 p-3 rounded">
                          <p className="text-sm text-gray-300">Name</p>
                          <p className="font-medium text-white">{user?.name || 'Not provided'}</p>
                        </div>
                        <div className="bg-gray-800 bg-opacity-30 p-3 rounded">
                          <p className="text-sm text-gray-300">Email</p>
                          <p className="font-medium text-white">{user?.email || 'Not provided'}</p>
                        </div>
                        <div className="bg-gray-800 bg-opacity-30 p-3 rounded">
                          <p className="text-sm text-gray-300">Role</p>
                          <p className="font-medium text-white">{user?.role ? user.role.charAt(0).toUpperCase() + user.role.slice(1) : 'Not provided'}</p>
                        </div>
                        <div className="bg-gray-800 bg-opacity-30 p-3 rounded">
                          <p className="text-sm text-gray-300">Phone</p>
                          <p className="font-medium text-white">{user?.phone || 'Not provided'}</p>
                        </div>
                      </div>
                      
                      {user?.bio && (
                        <div className="bg-gray-800 bg-opacity-30 p-3 rounded">
                          <p className="text-sm text-gray-300">Bio</p>
                          <p className="font-medium text-white">{user.bio}</p>
                        </div>
                      )}
                      
                      <div className="flex flex-wrap gap-2 mt-2">
                        {user?.socialLinks?.linkedin && (
                          <a 
                            href={user.socialLinks.linkedin} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="inline-flex items-center px-3 py-1 bg-blue-900 bg-opacity-30 text-blue-300 rounded-full text-sm hover:bg-blue-800 hover:bg-opacity-50 transition-colors"
                          >
                            LinkedIn
                          </a>
                        )}
                        {user?.socialLinks?.portfolio && (
                          <a 
                            href={user.socialLinks.portfolio} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="inline-flex items-center px-3 py-1 bg-green-900 bg-opacity-30 text-green-300 rounded-full text-sm hover:bg-green-800 hover:bg-opacity-50 transition-colors"
                          >
                            Portfolio
                          </a>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Upcoming Events */}
              <div className="bg-gray-800 bg-opacity-50 p-6 rounded-xl shadow-lg border border-gray-700 backdrop-blur-sm">
                <h4 className="text-xl font-semibold text-white mb-4 border-b border-gray-700 pb-2">
                  <FaCalendarAlt className="inline mr-2 text-blue-400" />
                  Upcoming Events
                </h4>
                {events.length > 0 ? (
                  <ul className="divide-y divide-gray-700">
                    {events.map(event => (
                      <li key={event._id} className="py-3 hover:bg-gray-700 hover:bg-opacity-30 transition-colors">
                        <div className="flex justify-between items-start">
                          <div>
                            <p className="font-medium text-white">{event.title}</p>
                            <p className="text-sm text-gray-300">
                              {new Date(event.date).toLocaleDateString()} • {event.location || 'Location TBA'}
                            </p>
                          </div>
                          <button 
                            onClick={() => navigate(`/events/${event._id}`)}
                            className="text-blue-400 hover:text-blue-300 text-sm font-medium"
                          >
                            View
                          </button>
                        </div>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <div className="text-center py-8">
                    <p className="text-gray-300 mb-4">No upcoming events found.</p>
                    <button 
                      onClick={() => navigate('/events')}
                      className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    >
                      Browse Events
                    </button>
                  </div>
                )}
              </div>

              {/* Registered Events */}
              <div className="bg-gray-800 bg-opacity-50 p-6 rounded-xl shadow-lg border border-gray-700 backdrop-blur-sm sm:col-span-2">
                <h4 className="text-xl font-semibold text-white mb-4 border-b border-gray-700 pb-2">
                  <FaRegCalendarCheck className="inline mr-2 text-blue-400" />
                  My Registered Events
                </h4>
                {registeredEvents.length > 0 ? (
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-700">
                      <thead>
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Event</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Date</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Status</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-700">
                        {registeredEvents.map(event => (
                          <tr key={event.id} className="hover:bg-gray-700 hover:bg-opacity-30 transition-colors">
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="text-sm font-medium text-white">{event.title}</div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                              {event.date}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span className="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-900 bg-opacity-30 text-green-300">
                                {event.status}
                              </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              <button 
                                onClick={() => navigate(`/events/${event.id}`)}
                                className="text-blue-400 hover:text-blue-300 font-medium"
                              >
                                View Details
                              </button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <p className="text-gray-300 mb-4">You haven't registered for any events yet.</p>
                    <button 
                      onClick={() => navigate('/events')}
                      className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    >
                      Browse Events
                    </button>
                  </div>
                )}
              </div>

              {/* Liked Events */}
              <div className="bg-gray-800 bg-opacity-50 p-6 rounded-xl shadow-lg border border-gray-700 backdrop-blur-sm sm:col-span-2">
                <h4 className="text-xl font-semibold text-white mb-4 border-b border-gray-700 pb-2">
                  <FaHeart className="inline mr-2 text-red-400" />
                  My Liked Events
                </h4>
                {likedEvents.length > 0 ? (
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-700">
                      <thead>
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Event</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Date</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Location</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-700">
                        {likedEvents.map(event => (
                          <tr key={event.id} className="hover:bg-gray-700 hover:bg-opacity-30 transition-colors">
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="text-sm font-medium text-white">{event.title}</div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                              {event.date}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                              {event.location}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              <button 
                                onClick={() => navigate(`/events/${event.id}`)}
                                className="text-blue-400 hover:text-blue-300 font-medium"
                              >
                                View Details
                              </button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <p className="text-gray-300 mb-4">You haven't liked any events yet.</p>
                    <button 
                      onClick={() => navigate('/events')}
                      className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    >
                      Browse Events
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
